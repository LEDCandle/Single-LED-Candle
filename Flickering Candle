/* This code was written as example code for the "A Realistic and Interative LED Candle" Project submitted to the USITT 2015 Theatre Technology Exhibit (Tech Expo)
This code supports a single LED and was written to be used with Arduino Pro Mini; an Allegro A1324LUA-T Hall Effect Sensor and the Modern Device Rev. P Wind Sensor
This software is provided by Trent Kugler and licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (http://creativecommons.org/licenses/by-nc-sa/4.0/).
Please contact trent.kugler [at] gmail.com with questions or concerns.

THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL THE PROVIDER BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

int ledPin[]={3}; //Output Pins for the Yellow LEDs; add Digital output pin numbers to the array for additional LEDs
int windSensor=3; //Analog Pin that Wind Sensor output is connected to
int hallSensor=2; //Analog Pin that Hall Sensor output is connected to
int ledOut_Raw1=0; //Raw random value, final output level of up/down fade
int ledOut_Final1=0; //Output level of LED, divided into steps for smooth fade
int ledOut_Step1=0; //Amount of Increase/decrease for each step of the PWM fade FOR loop
int pwmStep=0; //number of steps in each light output change of yellow LEDs
int sampleVal1; // Used to "debounce" the wind sensor and detect quick changes
int sampleVal2;
byte flameState; //currently used to ensure candle remains off when blown out, but is also able to be reset via digital input switch (lighterPin)
//Below are the variables for using temperature for flame detection 
int hallReading=0; //first temp reading
boolean ledState=false;
unsigned long millis1=0;

void setup(){
for(int z=0; z <=4; z++){  
  pinMode(ledPin[z],OUTPUT); //setups up output pins for yellow LEDs
  }
flameState = 0; //ensures candle can be lit at startup
//Serial.begin(9600);  //Leave this commented out unless debugging sensor inoput
millis1 = millis();  //initializes millis1 for use as a timer
}

void loop(){
//IF1 checks to see the candle is OFF, if TRUE the the flameDetection loop is triggered (uses Hall Effect Sensor)
//If [IF1] is FALSE (candle is lit) "else if" is executed; which begins reading the windSensor:
if(flameState == 0){ //IF1
  flameDetection();
  }
  
else if(flameState == 1){ //takes two readings of the wind sensor for debouncing 
  sampleVal1 = analogRead(windSensor);
  delay(1);
  sampleVal2 = analogRead(windSensor);
  
  //MUST Check to see if candle has been blown out FIRST, if false, then check if it is "At Rest" or "Flickering Strongly" 
  
  if(sampleVal1 > 410 && sampleVal2 > 410){ //threshold for blowing out the candle THESE VALUES MAY NEED ADJUSTMENT BASED ON SENSOR TYPE AND PLACEMENT   
    for(int i = 0; i <=2; i++){
      digitalWrite(ledPin[i], LOW); //If both readings exceed threshold turn off all 3 LED pins (candle is blown out)
    }
    flameState = 0;
    delay(3000);
    millis1 = millis();
    }
    
  else if(sampleVal1 <= 300){ //if wind sensor reads below threshold, call function for an "at rest" stable flame THIS VALUE MAY NEED ADJUSTMENT BASED ON SENSOR TYPE AND PLACEMENT
    atRest();
  }
  
  else{
    stage1(); //finally; if none of the above are true call function for quickly flickering candle (if its being blown on)
    }
  }
}

void atRest(){ //program for steady flicker
pwmStep = random(10,17); //picks a random number (between the defined range) of steps for the fade up/down
  ledOut_Raw1 = random(-30,30); //picks a random value to change the LED output (negative number decreases output, positive number increases)
  ledOut_Step1 = ledOut_Raw1/pwmStep; //divides the random value by the number of steps in the fade to come up with the increase/decrease in value per step
  
    for (int i=0; i<= pwmStep; i++){// runs the "for" loop the same number of times as as the pwmStep value
    ledOut_Final1 = ledOut_Final1 + ledOut_Step1; //adds (or subtracts) the step value to each LED output each time the loops runs (once it completes the change is equal to the RAW value
    
    if(ledOut_Final1 >230){ //the following limits the highest brightness the LEDS can reach (also keeps the value of the output from "overflowing" ie if the current output is 250 and 10 is added to it the new value will be 4)
      ledOut_Final1 =230;
    }
    if(ledOut_Final1 < 20){ //the following limits the lowest brightness the LEDS can reach (also keeps the value of the output from "overflowing" ie if the current output is 2 and 10 is subtracted from it the new value will be 247)
      ledOut_Final1 = 20;
    }
    
    analogWrite(ledPin[0], ledOut_Final1); //applies the  change to the LED output
    delay(random(5,8)); //short random delay between steps (for a more natural feel)
    }
}

void stage1(){ //same as atRest, but with a different scale to operate within to cause the flickering effect
for(int y=0; y<=2; y++){ 
  pwmStep = random(3,9);
  ledOut_Raw1 = random(-75,75);
  ledOut_Step1 = ledOut_Raw1/pwmStep;
  
  ledOut_Final1 = ledOut_Final1 + ledOut_Step1;
  
  if(ledOut_Final1 >80){
  ledOut_Final1 =80;
  }
  if(ledOut_Final1 < 2){
  ledOut_Final1 = 2;
  }
  
    analogWrite(ledPin[0], ledOut_Final1);
    delay(random(5,8));
    }
}

void flameDetection(){
  hallReading = analogRead(hallSensor); //read output of Hall Effect Sensor
  //Serial.println(hallReading); //Leave this line commented out unless debugging the Hall Effect Sensor (Serial Output must be enabled)
  
  if(hallReading < 499 || hallReading > 530){ //THIS VALUE MAY NEED ADJUSTMENT BASED ON SENSOR TYPE AND PLACEMENT AND/OR MAGNET STRENGTH
    //Serial.println("GOOD"); //Leave this commented out unless debugging the Hall Effect Sensor (Serial Output must be enabled)
    flameState = 1;
    }
    //Insert Pause between readings (very short)
    else{
      delay(50);
    }
}
